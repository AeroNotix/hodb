#include "Arduino.h"
#include <SoftwareSerialWithHalfDuplex.h>
#include "hodb.h"

byte COMMAND_BYTE = 0x20;
byte TYPICAL_COMMAND_LENGTH = 0x5;
unsigned int DEFAULT_COMMAND_TIMEOUT_MS = 250;
unsigned int ECU_RESPONSE_HEADER_SIZE = 2;

CommandData Commands[] = {
    {RPM, 0x00, 0x05, 0x02},
    {ECT, 0x01, 0x04, 0x01},
    {VSS, 0x02, 0x04, 0x01},
    {IAT, 0x11, 0x04, 0x01},
    {TPS, 0x14, 0x04, 0x01},
    {TimingAdvance, 0x26, 0x04, 0x01},
    {IACV, 0x28, 0x03, 0x01}
};

Honda3Pin::Honda3Pin(uint8_t k_line_pin, uint8_t odb1_or_odb2) :
    _ecuSerial(k_line_pin, k_line_pin, false, false),
    _ecupacket{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
{
    _odb1_or_odb2 = odb1_or_odb2;
}

void Honda3Pin::Init() {
    _ecuSerial.begin(9600);
    int initSequence[] = { 0x68, 0x6a, 0xf5, 0xaf, 0xbf, 0xb3, 0xb2, 0xc1, 0xdb, 0xb3, 0xe9 };
    for (int i : initSequence) {
        _ecuSerial.write(i);
    }
    delay(300);
}

CommandData Honda3Pin::findCommand(Command cmd) {
    for (CommandData c : Commands) {
        if (c.commandType == cmd) {
            return c;
        }
    }
}

byte checksum(byte command_byte, byte send_length, byte address, byte read_length) {
    return (0xFF - (command_byte + send_length + address + read_length - 0x01));
}

bool checksum_matches(byte packet[20]) {
    byte length = packet[1];
    int command_response_checksum = 0;
    for (int i = ECU_RESPONSE_HEADER_SIZE; i < length; i++) {
        command_response_checksum += packet[i];
    }
    return (0xFF - (packet[0] + packet[1] + command_response_checksum - 0x01)) == packet[length+ECU_RESPONSE_HEADER_SIZE];
}

bool Honda3Pin::ecuCommand(byte command_byte, byte send_length, byte address, byte read_length, unsigned int timeout) {

  unsigned long timeOut = millis() + timeout;

  memset(_ecupacket, 0, sizeof(_ecupacket));

  _ecuSerial.listen();

  _ecuSerial.write(command_byte);
  _ecuSerial.write(send_length);
  _ecuSerial.write(address);
  _ecuSerial.write(read_length);
  _ecuSerial.write(checksum(command_byte, send_length, address, read_length));

  int i = 0;
  while (i < read_length && millis() < timeOut) {
    if (_ecuSerial.available()) {
        _ecupacket[i++] = _ecuSerial.read();
    }
  }
  return checksum_matches(_ecupacket);
}

bool Honda3Pin::ecuCommand(byte command_byte, byte send_length, byte address, byte read_length) {
    return ecuCommand(command_byte, send_length, address, read_length, DEFAULT_COMMAND_TIMEOUT_MS);
}

bool Honda3Pin::ecuCommand(Command cmd, unsigned int timeout) {
    CommandData cd = findCommand(cmd);
    return ecuCommand(COMMAND_BYTE, cd.requestSize, cd.address, cd.responseSize);
}

bool Honda3Pin::ecuCommand(Command cmd) {
    return ecuCommand(cmd, DEFAULT_COMMAND_TIMEOUT_MS);
}

int Honda3Pin::basicCommand(Command cmd) {
    if (ecuCommand(cmd)) {
        return _ecupacket[2];
    } else {
        return -1;
    }
}

// This gives strange responses:
// [
//  [0, 5, 12, 73, 166],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 87, 152],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 62, 177],
//  [0, 5, 12, 47, 192],
//  [0, 5, 12, 91, 148],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 98, 141],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 107, 132],
//  [0, 5, 12, 36, 203],
//  [0, 5, 12, 28, 211],
//  [0, 5, 12, 72, 167],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 68, 171],
//  [0, 5, 12, 80, 159],
//  [0, 5, 12, 95, 144],
//  [0, 5, 12, 100, 139],
//  [0, 5, 12, 60, 179],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 122, 117],
//  [0, 5, 12, 113, 126],
//  [0, 5, 12, 123, 116],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 123, 116],
//  [0, 5, 12, 119, 120],
//  [0, 5, 12, 83, 156],
//  [0, 5, 12, 101, 138],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 70, 169],
//  [0, 5, 12, 69, 170],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 93, 146],
//  [0, 5, 12, 72, 167],
//  [0, 5, 12, 71, 168],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 78, 161],
//  [0, 5, 12, 61, 178],
//  [0, 5, 12, 59, 180],
//  [0, 5, 12, 71, 168],
//  [0, 5, 12, 86, 153],
//  [0, 5, 12, 97, 142],
//  [0, 5, 12, 52, 187],
//  [0, 5, 12, 52, 187],
//  [0, 5, 12, 86, 153],
//  [0, 5, 12, 97, 142],
//  [0, 5, 12, 101, 138],
//  [0, 5, 12, 85, 154],
//  [0, 5, 12, 79, 160],
//  [0, 5, 12, 87, 152],
//  [0, 5, 12, 97, 142],
//  [0, 5, 12, 117, 122],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 122, 117],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 140, 99],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 124, 115],
//  [0, 5, 12, 82, 157],
//  [0, 5, 12, 44, 195],
//  [0, 5, 12, 68, 171],
//  [0, 5, 12, 100, 139],
//  [0, 5, 12, 107, 132],
//  [0, 5, 12, 93, 146],
//  [0, 5, 12, 64, 175],
//  [0, 5, 12, 43, 196],
//  [0, 5, 12, 75, 164],
//  [0, 5, 12, 86, 153],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 69, 170],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 66, 173],
//  [0, 5, 12, 59, 180],
//  [0, 5, 12, 58, 181],
//  [0, 5, 12, 57, 182],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 101, 138],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 52, 187],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 114, 125],
//  [0, 5, 12, 109, 130],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 105, 134],
//  [0, 5, 12, 117, 122],
//  [0, 5, 12, 113, 126],
//  [0, 5, 12, 73, 166],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 98, 141],
//  [0, 5, 12, 94, 145],
//  [0, 5, 12, 105, 134],
//  [0, 5, 12, 54, 185],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 123, 116],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 50, 189],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 78, 161],
//  [0, 5, 12, 82, 157],
//  [0, 5, 12, 51, 188],
//  [0, 5, 12, 69, 170],
//  [0, 5, 12, 83, 156],
//  [0, 5, 12, 96, 143],
//  [0, 5, 12, 75, 164],
//  [0, 5, 12, 48, 191],
//  [0, 5, 12, 67, 172],
//  [0, 5, 12, 94, 145],
//  [0, 5, 12, 114, 125],
//  [0, 5, 12, 100, 139],
//  [0, 5, 12, 61, 178],
//  [0, 5, 12, 71, 168],
//  [0, 5, 12, 83, 156],
//  [0, 5, 12, 82, 157],
//  [0, 5, 12, 96, 143],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 82, 157],
//  [0, 5, 12, 85, 154],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 91, 148],
//  [0, 5, 12, 106, 133],
//  [0, 5, 12, 114, 125],
//  [0, 5, 12, 139, 100],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 94, 145],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 98, 141],
//  [0, 5, 12, 107, 132],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 97, 142],
//  [0, 5, 12, 107, 132],
//  [0, 5, 12, 103, 136],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 53, 186],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 57, 182],
//  [0, 5, 12, 66, 173],
//  [0, 5, 12, 90, 149],
//  [0, 5, 12, 66, 173],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 83, 156],
//  [0, 5, 12, 93, 146],
//  [0, 5, 12, 93, 146],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 81, 158],
//  [0, 5, 12, 125, 114],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 66, 173],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 96, 143],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 98, 141],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 134, 105],
//  [0, 5, 12, 125, 114],
//  [0, 5, 12, 100, 139],
//  [0, 5, 12, 119, 120],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 105, 134],
//  [0, 5, 12, 80, 159],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 78, 161],
//  [0, 5, 12, 72, 167],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 59, 180],
//  [0, 5, 12, 71, 168],
//  [0, 5, 12, 102, 137],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 90, 149],
//  [0, 5, 12, 82, 157],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 51, 188],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 188, 51],
//  [0, 5, 27, 242, 238],
//  [0, 5, 47, 197, 7],
//  [0, 5, 56, 128, 67],
//  [0, 5, 49, 8, 194],
//  [0, 5, 41, 237, 229],
//  [0, 5, 35, 180, 36],
//  [0, 5, 29, 64, 158],
//  [0, 5, 23, 82, 146],
//  [0, 5, 17, 77, 157],
//  [0, 5, 12, 132, 107],
//  [0, 5, 12, 98, 141],
//  [0, 5, 13, 46, 192],
//  [0, 5, 13, 181, 57],
//  [0, 5, 13, 163, 75],
//  [0, 5, 13, 47, 191],
//  [0, 5, 12, 129, 110],
//  [0, 5, 12, 69, 170],
//  [0, 5, 12, 50, 189],
//  [0, 5, 12, 92, 147],
//  [0, 5, 12, 68, 171],
//  [0, 5, 12, 85, 154],
//  [0, 5, 14, 196, 41],
//  [0, 5, 23, 35, 193],
//  [0, 5, 35, 205, 11],
//  [0, 5, 31, 245, 231],
//  [0, 5, 25, 147, 79],
//  [0, 5, 21, 6, 224],
//  [0, 5, 15, 64, 172],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 165, 74],
//  [0, 5, 13, 92, 146],
//  [0, 5, 13, 200, 38],
//  [0, 5, 13, 174, 64],
//  [0, 5, 13, 42, 196],
//  [0, 5, 12, 116, 123],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 62, 177],
//  [0, 5, 12, 68, 171],
//  [0, 5, 12, 114, 125],
//  [0, 5, 12, 95, 144],
//  [0, 5, 12, 95, 144],
//  [0, 5, 12, 96, 143],
//  [0, 5, 12, 62, 177],
//  [0, 5, 12, 27, 212],
//  [0, 5, 12, 33, 206],
//  [0, 5, 12, 46, 193],
//  [0, 5, 12, 72, 167],
//  [0, 5, 12, 80, 159],
//  [0, 5, 12, 51, 188],
//  [0, 5, 12, 21, 218],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 74, 165],
//  [0, 5, 12, 94, 145],
//  [0, 5, 12, 58, 181],
//  [0, 5, 12, 65, 174],
//  [0, 5, 12, 101, 138],
//  [0, 5, 12, 103, 136],
//  [0, 5, 12, 91, 148],
//  [0, 5, 12, 81, 158],
//  [0, 5, 12, 77, 162],
//  [0, 5, 12, 63, 176],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 107, 132],
//  [0, 5, 12, 47, 192],
//  [0, 5, 12, 60, 179],
//  [0, 5, 12, 103, 136],
//  [0, 5, 12, 105, 134],
//  [0, 5, 12, 58, 181],
//  [0, 5, 12, 65, 174],
//  [0, 5, 12, 95, 144],
//  [0, 5, 12, 115, 124],
//  [0, 5, 12, 126, 113],
//  [0, 5, 12, 90, 149],
//  [0, 5, 12, 104, 135],
//  [0, 5, 12, 109, 130],
//  [0, 5, 12, 118, 121],
//  [0, 5, 12, 87, 152],
//  [0, 5, 12, 101, 138],
//  [0, 5, 12, 88, 151],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 138, 101],
//  [0, 5, 12, 117, 122],
//  [0, 5, 12, 99, 140],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 112, 127],
//  [0, 5, 12, 123, 116],
//  [0, 5, 12, 68, 171],
//  [0, 5, 12, 72, 167],
//  [0, 5, 12, 84, 155],
//  [0, 5, 12, 95, 144],
//  [0, 5, 12, 87, 152],
//  [0, 5, 12, 66, 173],
//  [0, 5, 12, 89, 150],
//  [0, 5, 12, 111, 128],
//  [0, 5, 11, 209, 31],
//  [0, 5, 11, 109, 131],
//  [0, 5, 11, 136, 104],
//  [0, 5, 11, 202, 38],
//  [0, 5, 12, 25, 214],
//  [0, 5, 12, 47, 192],
//  [0, 5, 12, 57, 182],
//  [0, 5, 12, 76, 163],
//  [0, 5, 12, 22, 217],
//  [0, 5, 12, 51, 188]
//   ]
unsigned int Honda3Pin::RPM() {
    if (ecuCommand(Command::RPM)) {
        
        if (_odb1_or_odb2 == ODB1) {
            Serial.print("Raw data: ");
            for (int i = 0; i < 20; i++) {
                Serial.print(_ecupacket[i]);
                Serial.print(" ");
                Serial.println("");
            } 
            return (1875000 / (_ecupacket[2] * 256 + _ecupacket[3] + 1)) * 4;
        }
        
        if (_odb1_or_odb2 == ODB2) {
            return (_ecupacket[2] * 256) + _ecupacket[3];
        }
    }
    return -1;
}

int Honda3Pin::ECT() {
    return basicCommand(Command::ECT);
}

int Honda3Pin::VSS() {
    return basicCommand(Command::VSS);
}

int Honda3Pin::IAT() {
    return basicCommand(Command::IAT);
}

int Honda3Pin::TPS() {
    return basicCommand(Command::TPS);
}

int Honda3Pin::TimingAdvance() {
    return basicCommand(Command::TimingAdvance);
}

int Honda3Pin::IACV() {
    return basicCommand(Command::IACV);
}

bool Honda3Pin::ResetECUErrorCodes() {
    // TODO
    return false;
}
